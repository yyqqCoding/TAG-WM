(SlpMark) wang003@wang003:/media/wang003/liyongqing/TAG/watermarkLOC$ python test_xor_watermark.py
Warning: DVRD module not available, tamper localization refinement disabled
🔬 XOR基础模式语义定位水印验证测试
解决方案验证：语义向量 + 基础模式 → XOR → 完美统计特性水印
🔧 初始化XOR水印验证器 (设备: cuda)
🚀 初始化简化SEAL-LOC测试系统 (设备: cuda)
✅ 简化测试系统初始化完成
🚀 开始XOR基础模式语义定位水印完整验证
================================================================================

==================================================
🧪 测试1：完美基础模式统计特性
==================================================
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
📊 基础模式分析:
  总比特数: 16384
  1的数量: 8192
  0的数量: 8192
  1的比例: 0.500000
  完美分布: ✅
  交替模式: ✅
  模式预览: [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]

==================================================
🧪 测试2：语义密钥伪随机性
==================================================

🔑 测试prompt: 'A beautiful landscape with mountains'
    🔑 全局种子: 'A beautiful landscape with mountains' → 132972376
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8245, 目标=8192
    🔄 翻转53个1→0
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  📊 1的比例: 0.5000
  🏃 游程数量: 8180 (期望: 8193.0)
  🔬 卡方统计量: 0.00
  🔗 自相关系数: 0.0015
  🔍 密钥预览: [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0]

🔑 测试prompt: 'A cat sitting on a table'
    🔑 全局种子: 'A cat sitting on a table' → 1484351339
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8119, 目标=8192
    🔄 翻转73个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  📊 1的比例: 0.5000
  🏃 游程数量: 8165 (期望: 8193.0)
  🔬 卡方统计量: 0.00
  🔗 自相关系数: 0.0034
  🔍 密钥预览: [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1]

🔑 测试prompt: 'Abstract art with colorful patterns'
    🔑 全局种子: 'Abstract art with colorful patterns' → 1964383686
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8165, 目标=8192
    🔄 翻转27个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  📊 1的比例: 0.5000
  🏃 游程数量: 8221 (期望: 8193.0)
  🔬 卡方统计量: 0.00
  🔗 自相关系数: -0.0035
  🔍 密钥预览: [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]

🔑 测试prompt: 'Portrait of a young woman'
    🔑 全局种子: 'Portrait of a young woman' → 304210154
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8152, 目标=8192
    🔄 翻转40个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  📊 1的比例: 0.5000
  🏃 游程数量: 8197 (期望: 8193.0)
  🔬 卡方统计量: 0.00
  🔗 自相关系数: -0.0005
  🔍 密钥预览: [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1]

🔑 测试prompt: 'Cityscape at night with lights'
    🔑 全局种子: 'Cityscape at night with lights' → 835652364
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8142, 目标=8192
    🔄 翻转50个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  📊 1的比例: 0.5000
  🏃 游程数量: 8206 (期望: 8193.0)
  🔬 卡方统计量: 0.00
  🔗 自相关系数: -0.0016
  🔍 密钥预览: [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0]

==================================================
🧪 测试3：XOR最终水印统计特性（含分布校正）
==================================================

🔀 测试prompt: 'A beautiful landscape with mountains'
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'A beautiful landscape with mountains' → 132972376
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8245, 目标=8192
    🔄 翻转53个1→0
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8240, 目标=8192
    🔄 翻转48个1→0
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
  📊 1的比例: 0.500000
  📊 1的数量: 8192/8192 (目标)
  ✅ 严格完美分布: 是
  📏 分布误差: 0.0000000000
  🌐 空间熵: 1.0000
  📈 高频分数: 0.5002
  📐 形状: torch.Size([4, 64, 64])
  🔍 水印预览: [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1]

🔀 测试prompt: 'A cat sitting on a table'
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'A cat sitting on a table' → 1484351339
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8119, 目标=8192
    🔄 翻转73个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8206, 目标=8192
    🔄 翻转14个1→0
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
  📊 1的比例: 0.500000
  📊 1的数量: 8192/8192 (目标)
  ✅ 严格完美分布: 是
  📏 分布误差: 0.0000000000
  🌐 空间熵: 1.0000
  📈 高频分数: 0.5016
  📐 形状: torch.Size([4, 64, 64])
  🔍 水印预览: [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0]

🔀 测试prompt: 'Abstract art with colorful patterns'
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'Abstract art with colorful patterns' → 1964383686
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8165, 目标=8192
    🔄 翻转27个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8126, 目标=8192
    🔄 翻转66个0→1
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
  📊 1的比例: 0.500000
  📊 1的数量: 8192/8192 (目标)
  ✅ 严格完美分布: 是
  📏 分布误差: 0.0000000000
  🌐 空间熵: 1.0000
  📈 高频分数: 0.4983
  📐 形状: torch.Size([4, 64, 64])
  🔍 水印预览: [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1]

🔀 测试prompt: 'Portrait of a young woman'
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'Portrait of a young woman' → 304210154
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8152, 目标=8192
    🔄 翻转40个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8260, 目标=8192
    🔄 翻转68个1→0
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
  📊 1的比例: 0.500000
  📊 1的数量: 8192/8192 (目标)
  ✅ 严格完美分布: 是
  📏 分布误差: 0.0000000000
  🌐 空间熵: 1.0000
  📈 高频分数: 0.4996
  📐 形状: torch.Size([4, 64, 64])
  🔍 水印预览: [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]

🔀 测试prompt: 'Cityscape at night with lights'
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'Cityscape at night with lights' → 835652364
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8142, 目标=8192
    🔄 翻转50个0→1
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8318, 目标=8192
    🔄 翻转126个1→0
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
  📊 1的比例: 0.500000
  📊 1的数量: 8192/8192 (目标)
  ✅ 严格完美分布: 是
  📏 分布误差: 0.0000000000
  🌐 空间熵: 1.0000
  📈 高频分数: 0.4993
  📐 形状: torch.Size([4, 64, 64])
  🔍 水印预览: [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1]

==================================================
🧪 测试4：与原始TAG-WM对比（含分布校正验证）
==================================================

📐 原始TAG-WM奇偶模式:
  1的数量: 8192/8192
  1的比例: 0.500000
  严格完美: 是

🎲 随机语义水印（问题方案）:
  1的数量: 8135/8192
  1的比例: 0.496521
  严格完美: 否

🔀 XOR语义水印（解决方案+分布校正）:
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'A beautiful landscape with mountains' → 132972376
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8245, 目标=8192
    🔄 翻转53个1→0
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8240, 目标=8192
    🔄 翻转48个1→0
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
  1的数量: 8192/8192
  1的比例: 0.500000
  严格完美: 是

📊 分布质量对比:
  tagwm_original: 8192/8192 (0.500000) ✅完美
  random_semantic: 8135/8192 (0.496521) ❌不完美
  xor_semantic_corrected: 8192/8192 (0.500000) ✅完美

🎯 分布校正验证:
  原始TAG-WM: 天然完美分布
  随机方案: 通常不完美，需要运气
  XOR+校正: 保证严格完美分布

================================================================================
📋 XOR基础模式语义定位水印验证总结报告
================================================================================

✅ 基础模式验证:
  完美伯努利分布: 通过
  高频交替结构: 通过
  精确比例: 0.500000

✅ XOR水印验证（含最终分布校正）:
  严格完美分布测试: 5/5 通过
  语义绑定: 每个prompt生成唯一确定性水印

📊 详细分布分析:
  'A beautiful landscape with mou...': 8192/8192 (0.500000) ✅完美
  'A cat sitting on a table...': 8192/8192 (0.500000) ✅完美
  'Abstract art with colorful pat...': 8192/8192 (0.500000) ✅完美
  'Portrait of a young woman...': 8192/8192 (0.500000) ✅完美
  'Cityscape at night with lights...': 8192/8192 (0.500000) ✅完美

✅ 与TAG-WM对比:
  原始TAG-WM: 0.500000 (✅完美)
  XOR语义水印: 0.500000 (✅完美)

🎯 最终评估:
  🎉 完美成功！所有测试均通过严格0.5分布验证
  ✅ XOR基础模式 + 分布校正方案完全解决了统计分布问题
  ✅ 保持了TAG-WM的完美伯努利(0.5)分布
  ✅ 保留了高频棋盘格的篡改敏感性
  ✅ 实现了语义内容的密码学级别绑定
  ✅ 与TAG-WM的DMJS完全兼容
  🚀 预期定位水印精度将显著提升（>95%）

🎉 验证测试完成！
证明：XOR基础模式方案完美解决了原始语义定位水印的统计分布问题
(SlpMark) wang003@wang003:/media/wang003/liyongqing/TAG/watermarkLOC$


(SlpMark) wang003@wang003:/media/wang003/liyongqing/TAG/watermarkLOC$ python enhanced_test.py --prompt "A beautiful landscape"
🔬 增强测试模式 - 真实DDIM反转
🚀 初始化简化SEAL-LOC测试系统 (设备: cuda)
Warning: DVRD module not available, tamper localization refinement disabled
✅ 简化测试系统初始化完成
🔬 增强测试模式：启用真实DDIM反转
🚀 开始SEAL-LOC增强测试流程
📝 测试提示词: A beautiful landscape
🔄 加载Stable Diffusion模型...
📁 尝试从本地路径加载: /home/wang003/.cache/modelscope/hub/models/AI-ModelScope/stable-diffusion-2-1-base
Loading pipeline components...: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00<00:00,  8.10it/s]
✅ 扩散模型加载成功
🔒 生成版权水印...
✅ 版权水印生成完成 (长度: 256)
🎯 生成XOR基础模式的SEAL-LOC语义定位水印...
  📐 步骤1：生成基础模式 (完美棋盘格)
    📐 TAG-WM兼容基础模式: 16384位
    📊 0的数量: 8192, 1的数量: 8192
    📊 完美比例: 0.500000
    🎯 高频结构: 0-1-0-1-0-1... (对篡改最敏感)
  🔑 步骤2：生成语义密钥
    🔑 全局种子: 'A beautiful landscape' → 202450466
    🔑 语义密钥生成: 64个patch, 每个256位
    🔧 分布校正: 当前1的数量=8255, 目标=8192
    🔄 翻转63个1→0
    ✅ 校正完成: 1的数量=8192, 比例=0.500000
    📊 语义密钥统计: 1的比例 0.500000 (校正后)
    🔐 语义绑定: prompt内容 → patch级种子 → 确定性密钥
  🔀 步骤3：XOR混合生成最终定位水印
  🔧 步骤4：最终分布校正
    🔧 最终校正: 当前1的数量=8212, 目标=8192
    🔄 翻转20个1→0
    ✅ 最终校正完成: 1的数量=8192, 比例=0.500000
✅ XOR语义定位水印生成完成
  📊 基础模式1的比例: 0.500000
  📊 语义密钥1的比例: 0.500000
  📊 最终水印1的比例: 0.500000 (完美目标: 0.500000)
  🎯 完美统计特性 + 语义绑定 = 最优SEAL-LOC定位水印
🎲 生成TAG-WM标准初始噪声...
  📊 wm形状: torch.Size([256]), dtype: torch.int32
  📊 tlt形状: (16384,), dtype: int32
  📊 tlt值域: [0, 1]
  📊 tlt中1的比例: 0.5000
  📊 latent_size: torch.Size([4, 64, 64])
  🎯 使用SEAL-LOC最终定位水印作为TLT
✅ 使用TAG-WM完整嵌入流程成功
✅ latent_noise形状: torch.Size([1, 4, 64, 64])
✅ wm_repeat长度: 16384
🎨 生成水印化图像...
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [00:02<00:00, 22.77it/s]
✅ 水印化图像生成完成
🔍 执行增强水印重建...
✅ 可反转管道加载成功
  🔍 反转参数: guidance_scale=1, num_inference_steps=10
  📊 image_latents形状: torch.Size([1, 4, 64, 64]), dtype: torch.float16
  📊 text_embeddings形状: torch.Size([1, 77, 1024]), dtype: torch.float16
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 11/11 [00:00<00:00, 33.25it/s]
  ✅ 反转完成，reversed_latents_w形状: torch.Size([1, 4, 64, 64])
  🔍 reversed_tlt中1的比例: 0.4884
  🎯 SEAL-LOC定位水印重建完成
📏 计算比特精度...
  🔍 orig_w_cop类型: torch.int32, recon_w_cop类型: torch.int32
  🔍 orig_w_loc类型: torch.int32, recon_w_loc类型: torch.int32
📊 版权水印精度: 1.0000
📊 定位水印精度: 0.8088
📊 L2距离: 55.9643
✅ 增强水印重建成功
💾 保存增强测试结果...
✅ 增强测试结果已保存到: output/enhanced_test
✅ 增强测试流程完成！耗时: 4.07秒

📊 增强测试结果:
版权水印精度: 1.0000
定位水印精度: 0.8088
L2距离: 55.9643
耗时: 4.07秒
⚠️  精度需要进一步优化
🎉 增强测试完成！
(SlpMark) wang003@wang003:/media/wang003/liyongqing/TAG/watermarkLOC$




